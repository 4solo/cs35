





































	"http://www.w3.org/TR/html4/strict.dtd">
	PUBLIC "-//W3C//DTD HTML 4.01//EN"
 $Id: assign2.html,v 1.29 2013/04/08 16:46:24 eggert Exp $
 &copy; 2005, 2007, 2008, 2010, 2013 <a href='../mail-eggert.html'>Paul Eggert</a>
 &copy; 2007 Paul Eggert.
 See <a href='../copyright.html'>copying rules</a>.<br>
 and Steve VanDeBogart.
"<a href='http://mauimapp.com/moolelo/hwnwdseng.htm'>English to Hawaiian</a>", an introductory list of words.
"<samp>&lt;u&gt;a&lt;/u&gt;</samp>" as if it were "<samp>a</samp>",
"<samp>halau</samp>" and "<samp>kula</samp>"). You may find that some of the
"misspelled" as English, but not as Hawaiian? or "misspelled"
(ASCII apostrophe, which we use to represent &#8216;okina).
<!DOCTYPE html
</address>
</body>
</head>
</html>
</samp></pre>
</samp></pre>
</samp></pre>
</samp></pre>
</samp></pre>
</ul>
<a href='http://en.wikipedia.org/wiki/Hawaiian_language'>Hawaiian</a>,
<a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ln.html'>ln</a>,
<a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/toc.html'>standard
<address>
<body>
<h1>Assignment 2. Shell scripting</h1>
<h2>Homework: Find duplicate files</h2>
<h2>Laboratory: Spell-checking Hawaiian</h2>
<h2>Submit</h2>
<head>
<hr>
<html>
<li>The file <samp>lab2.log</samp> as described in the lab.</li>
<li>The file <samp>sameln</samp> as described in the homework.</li>
<li>The script <samp>buildwords</samp> as described in the lab.</li>
<meta http-equiv='Content-Type' content='text/html;charset=UTF-8'>
<p>All files should be ASCII text files, with no
<p>Check your work by running your Hawaiian spelling checker on
<p>Create in the file <samp>hwords</samp> a simple Hawaiian
<p>For this laboratory we assume you're in the standard C or <a
<p>If the shell script has bugs and
<p>If your script finds a file in D that is not a regular file, it
<p>If your script finds two or more files that are duplicates, it
<p>In this lab for convenience we use ASCII apostrophe (') to
<p>Keep a log in the file <samp>lab2.log</samp> of what you do in the
<p>Let's take the last command as the crude implementation of an
<p>Modify the last shell command shown above so that it checks the
<p>Submit the following files.</p>
<p>Suppose you're working in a project where software (or people)
<p>Then, take a text file containing the HTML in this
<p>We also assume the file <samp>words</samp> contains a sorted list of
<p>You need not worry about the cases where your script is given no
<p>Your script should be runnable as an ordinary user, and should be
<p>and make sure <samp>locale</samp> outputs the right thing afterwards.</p>
<p>should output nothing.</p>
<pre><samp><a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#export'>export</a> LC_ALL='C'
<pre><samp>awk '/\r/ || 80 &lt; length' lab2.log sameln
<pre><samp>cat foo.html bar.html | ./buildwords | less
<pre><samp>p k ' m n w l h a e i o u
<pre><samp>tr -c 'A-Za-z' '[\n*]'
<samp>/usr/share/dict/words</samp> on the SEASnet GNU/Linux hosts, and putting
<samp>`</samp> (ASCII grave accent) as if it were <samp>'</samp>
<title>Assignment 2. Shell scripting</title>
<ul>
Do not attempt to repair any remaining problems by hand; just use the
English spelling checker. Suppose we want to change it to be a
English words. Create such a file by sorting the contents of the file
Extract these words systematically from the tables in "English to Hawaiian". Assume that each occurrence of "<samp>&lt;tr&gt; &lt;td&gt;<var>Eword</var>&lt;/td&gt; &lt;td&gt;<var>Hword</var>&lt;/td&gt;</samp>" contains a Hawaiian word
Hawaiian dictionary <samp>hwords</samp> itself. Count the
Hawaiian; to fix this problem reject any entries that contain
POSIX shell and utilities</a>; please see
Some entries, for example "<samp>H&lt;u&gt;a&lt;/u&gt;lau, kula</samp>", contain
Use <a href='http://www.gnu.org/software/wget/'>Wget</a> to obtain
a directory D, finds all regular files immediately under D that are
a language whose traditional orthography
a shell script <samp>sameln</samp> that takes a single argument naming
and <a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html'>test</a>
and similarly for other letters; and treat
are in subdirectories of D; it should examine only files that are
arguments, or more than one argument.  However, be prepared to handle
as Hawaiian but not as English? If so, give examples.</p>
assignment's web page, and run the following commands with that
carriage returns, and with no more than 80 columns per line. The shell
command.</p>
command:</p>
create lots of files, many of them duplicates. You don't want the
dictionary containing a copy of all the Hawaiian words in
dictionary, since the dictionary is in all lower case.</p>
directory. To do that, you can use
doesn't do all the work, your log should record in detail each bug
duplicates are named .Y, .X, A, and B, it should keep .X and replace
duplicates, and replaces the duplicates
duplicates: you want just one copy of each, to save disk space. Write
entries are improperly formatted and contain English rather than
equivalent.</p>
example, if the duplicates are named X, A, and B, it should keep A and
file (for example, if the file not readable to you), it should report
files whose names contain special characters like spaces, "*", and
has only the following
href='http://en.wikipedia.org/wiki/POSIX'>POSIX</a> <a
href='http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07'>locale</a>. The
href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/locale.html'><samp>locale</samp></a>
immediately in D.</p>
in the <samp><var>Hword</var></samp> position. Treat upper case
into a shell script <samp>buildwords</samp>, which you should copy into your
is upper case should be lower-cased before it is checked against the
it has.</p>
its <a href='http://pubs.opengroup.org/onlinepubs/9699919799/idx/utilities.html'>list
lab so that you can reproduce the results later. This should not
leading "&ndash;".</p>
letters (or their capitalized equivalents):</p>
letters as if they were lower case; treat
links</a>. Your script should not recursively examine all files that
log; it should read the HTML from standard input and write a sorted list of
merely be a transcript of what you typed: it should be more like a
non-Hawaiian letters after the abovementioned substitutions are
number of "misspelled" English and Hawaiian words on this web
of utilities</a> for the commands that your script may use. Hint: see
or <samp>LC_CTYPE="POSIX"</samp>. If it doesn't, use the following
outputs (in particular, how its output differs from that of the
page, using your spelling checkers. Are there any words that are
performed. Sort the resulting list of words, removing any duplicates.
portable to any system that supports the
previous command), and why.</p>
replace X and B with hard links to A); however, it should prefer files
represent the Hawaiian &#8216;okina (&#8216;); it has no capitalized
script with a command like this:</p>
shell command <a
shell command:</p>
should keep the file whose name is lexicographically first (for
should output <samp>LC_CTYPE="C"</samp>
should silently ignore it; for example, it should silently ignore all
spaces or commas; treat them as multiple words (in this case, as
spelling checker for
spelling of Hawaiian rather than English, under the assumption
symbolic links and directories. If your script has a problem reading a
systematic rules mentioned above. Automate the systematic rules
text file being standard input. Describe generally what each command
that <samp>hwords</samp> is a Hawaiian dictionary. Input that
the <a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/cmp.html'><samp>cmp</samp></a>,
the <samp><a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html'>sort</a></samp>
the error and not treat it as a duplicate of any file.</p>
the others with hard links to .X).</p>
the result into a file named <samp>words</samp> in your working
the tables in
this web page (which you should also fetch with Wget), and on the
tr -cs 'A-Za-z' '[\n*]'
tr -cs 'A-Za-z' '[\n*]' | sort
tr -cs 'A-Za-z' '[\n*]' | sort -u
tr -cs 'A-Za-z' '[\n*]' | sort -u | comm - words
tr -cs 'A-Za-z' '[\n*]' | sort -u | comm -23 - words
true lab notebook, in which you briefly note down what you did and
unique words to standard output.  For example, we should be able to run this
utilities.</p>
what happened.</p>
whose name start with "." to other files (for example, if the
with <a href='http://en.wikipedia.org/wiki/Hard_link'>hard
your copy of that web page.
